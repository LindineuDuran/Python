# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'frm_youtube_downloader.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
import subprocess
from PyQt5 import QtCore, QtGui, QtWidgets as qtw
from pytube import YouTube

app_path = os.path.dirname(os.path.abspath(__file__))
ffmpeg = os.path.join(app_path, 'ffmpeg.exe')


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(500, 150)

        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)

        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Youtube.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon.addPixmap(QtGui.QPixmap("Youtube.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.On)
        MainWindow.setWindowIcon(icon)

        self.centralwidget = qtw.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.linkLabel = qtw.QLabel(self.centralwidget)
        self.linkLabel.setGeometry(QtCore.QRect(20, 10, 47, 13))
        self.linkLabel.setFont(font)
        self.linkLabel.setObjectName("linkLabel")

        self.urlText = qtw.QLineEdit(self.centralwidget)
        self.urlText.setGeometry(QtCore.QRect(20, 30, 460, 20))
        self.urlText.setObjectName("urlText")

        self.destinyLabel = qtw.QLabel(self.centralwidget)
        self.destinyLabel.setGeometry(QtCore.QRect(20, 60, 91, 16))
        self.destinyLabel.setFont(font)
        self.destinyLabel.setLineWidth(17)
        self.destinyLabel.setObjectName("destinyLabel")

        self.destinyText = qtw.QLineEdit(self.centralwidget)
        self.destinyText.setGeometry(QtCore.QRect(20, 80, 425, 20))
        self.destinyText.setObjectName("destinyText")
        self.destinyText.setText("D:\\Downloads")

        self.folderButton = qtw.QToolButton(self.centralwidget)
        self.folderButton.setGeometry(QtCore.QRect(455, 80, 25, 23))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("folder-open.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.folderButton.setIcon(icon1)
        self.folderButton.setObjectName("folderButton")

        self.downloadButton = qtw.QPushButton(self.centralwidget)
        self.downloadButton.setGeometry(QtCore.QRect(310, 115, 75, 23))
        self.downloadButton.setFont(font)
        self.downloadButton.setObjectName("downloadButton")

        self.videoButton = qtw.QRadioButton(self.centralwidget)
        self.videoButton.setGeometry(QtCore.QRect(20, 118, 50, 17))
        self.videoButton.setFont(font)
        self.videoButton.setChecked(True)
        self.videoButton.setObjectName("videoButton")

        self.audioButton = qtw.QRadioButton(self.centralwidget)
        self.audioButton.setGeometry(QtCore.QRect(105, 118, 51, 17))
        self.audioButton.setFont(font)
        self.audioButton.setObjectName("audioButton")

        self.apagaVideoBox = qtw.QCheckBox(self.centralwidget)
        self.apagaVideoBox.setGeometry(QtCore.QRect(190, 118, 95, 17))
        self.apagaVideoBox.setObjectName("apagaVideoBox")

        self.cancelButton = qtw.QPushButton(self.centralwidget)
        self.cancelButton.setGeometry(QtCore.QRect(405, 115, 75, 23))
        self.cancelButton.setFont(font)
        self.cancelButton.setObjectName("cancelButton")

        # buttons
        self.folderButton.clicked.connect(self.selectDir)
        self.downloadButton.clicked.connect(self.download)
        self.cancelButton.clicked.connect(qtw.QApplication.quit)

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate(
            "MainWindow", "Youtube Downloader"))
        self.linkLabel.setText(_translate("MainWindow", "URL link:"))
        self.destinyLabel.setText(_translate(
            "MainWindow", "File Destination:"))
        self.folderButton.setText(_translate("MainWindow", "..."))
        self.downloadButton.setText(_translate("MainWindow", "Download"))
        self.videoButton.setText(_translate("MainWindow", "Video"))
        self.audioButton.setText(_translate("MainWindow", "Audio"))
        self.apagaVideoBox.setText(_translate("MainWindow", "Apagar Vídeo"))
        self.cancelButton.setText(_translate("MainWindow", "Exit"))

    def showdialog(self, title, mensagem):
        msg = qtw.QMessageBox()
        msg.setIcon(qtw.QMessageBox.Information)

        msg.setText(mensagem)
        msg.setWindowTitle(title)
        msg.setStandardButtons(qtw.QMessageBox.Ok)
        msg.buttonClicked.connect(self.msgbtn)

        retval = msg.exec_()

    def msgbtn(self, i):
        print("Button pressed is:", i.text())

    # Seleciona local aonde arquivo será salvo
    def selectDir(self):
        selected_dir = qtw.QFileDialog.getExistingDirectory(
            MainWindow, caption='Choose Directory', directory=os.getcwd())

        if selected_dir != '':
            selected_dir = selected_dir.replace('/', '\\')
            os.rename(selected_dir, selected_dir.replace(' ', ''))
            selected_dir = selected_dir.replace(' ', '')
            self.destinyText.setText(selected_dir)

    def obtem_path(self):
        path = self.destinyText.text()
        return path

    def downloadVideo(self, link):
        youtubeObject = YouTube(link)
        youtubeObject = youtubeObject.streams.get_highest_resolution()

        try:
            path = self.obtem_path()
            video_name = youtubeObject.default_filename
            youtubeObject.download(output_path=path)
        except:
            self.showdialog(
                "Except!!!", "There has been an error in downloading your youtube video")

        return video_name

    def downloadAudio(self, link):
        youtubeObject = YouTube(link)
        path = self.obtem_path()
        audio = youtubeObject.streams.get_audio_only()
        audio.download(output_path=path)

        audio_name = audio.default_filename
        return audio_name

    def download(self):
        link = self.urlText.text()

        if self.videoButton.isChecked():
            video_name = self.downloadVideo(link)

            self.showdialog("Info!!!", "Fim do processo!")

            return video_name

        audio_name = self.downloadAudio(link)
        self.audioToMp3(audio_name)

        if self.audioButton.isChecked() and self.apagaVideoBox.isChecked():
            path = self.obtem_path()
            audio_name = audio_name.replace(' ', '_')
            os.remove(os.path.join(path, audio_name))

        self.showdialog("Info!!!", "Fim do processo!")

    def audioToMp3(self, audio_name):
        path = self.obtem_path()
        source = os.path.join(path, audio_name)
        
        if os.path.isfile(source.replace(' ', '_')):
            os.remove(source.replace(' ', '_'))

        if ' ' in source and os.path.isfile(source):
            try:
                os.rename(source, source.replace(' ', '_'))
            except FileNotFoundError as error:
                self.showdialog("Erro!!!", error.strerror + ' : ' + error.filename)
                print(error)
                sys.exit(app.exec_())
        else:
            self.showdialog("Erro!!!", 'O sistema não pode encontrar o caminho especificado: ' + source)
            print(error)
            sys.exit(app.exec_())

        audio_name = audio_name.replace(' ', '_')
        source = source.replace(' ', '_')

        file_without_ext = os.path.splitext(source)[0]

        print("source: " + source)
        print("final: " + os.path.join(path, file_without_ext + '.mp3'))

        result = subprocess.run(['ffmpeg.exe', '-y', '-i', source, os.path.join(
            path, file_without_ext + '.mp3')], shell=True, check=True)


if __name__ == "__main__":
    app = qtw.QApplication(sys.argv)
    MainWindow = qtw.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
